#!/bin/bash
set -euo pipefail

############################################
# 1. Salmon indexing and quantification
############################################

WORKDIR=/home/jade/1_sandsmelt/rundrap/out_drap_s1
THREADS=20   # use 20 CPU cores

# Transcriptomes (7 total, each with a unique index name)
declare -A TRANSCRIPTOMES
TRANSCRIPTOMES["transcripts_fpkm0_s1"]=$WORKDIR/meta_BR/d-cov_filter/transcripts_fpkm_0.fa
TRANSCRIPTOMES["transcripts_fpkm1_s1"]=$WORKDIR/meta_BR/d-cov_filter/transcripts_fpkm_1.fa
TRANSCRIPTOMES["transcripts_fpkm0_s2"]=/home/jade/1_sandsmelt/rundrap/out_drap_s2/transcripts_fpkm_0.fa
TRANSCRIPTOMES["transcripts_fpkm0.5_s2"]=/home/jade/1_sandsmelt/rundrap/out_drap_s2/transcripts_fpkm_0.5.fa
TRANSCRIPTOMES["transcripts_fpkm0_s3"]=/home/jade/1_sandsmelt/rundrap/meta_s3/transcripts_fpkm_0.fa
TRANSCRIPTOMES["transcripts_fpkm0.5_s3"]=/home/jade/1_sandsmelt/rundrap/meta_s3/transcripts_fpkm_0.5.fa
TRANSCRIPTOMES["transcripts_fpkm1_s3"]=/home/jade/1_sandsmelt/rundrap/meta_s3/transcripts_fpkm_1.fa

### Build indices (skip if already exist)
for NAME in "${!TRANSCRIPTOMES[@]}"; do
    TX=${TRANSCRIPTOMES[$NAME]}
    IDX=$WORKDIR/salmon_index_${NAME}

    if [[ -d "$IDX" && -s "$IDX/hash.bin" ]]; then
        echo "Index for $NAME already exists at $IDX — skipping."
    else
        echo "Building Salmon index for $NAME with $THREADS threads..."
        mkdir -p "$IDX"
        salmon index --threads $THREADS --index "$IDX" --transcripts "$TX"
    fi
done

### Quantify reads
R1_FILES=(/home/jade/1_sandsmelt/rundrap/out_drap_s1/*/*/*/uf*_1.norm.fq.gz)

for R1 in "${R1_FILES[@]}"; do
    R2=${R1/_1.norm.fq.gz/_2.norm.fq.gz}
    SAMPLE=$(basename "$R1" _1.norm.fq.gz)

    for NAME in "${!TRANSCRIPTOMES[@]}"; do
        IDX=$WORKDIR/salmon_index_${NAME}
        OUT=$WORKDIR/salmon_quant/${NAME}/${SAMPLE}

        if [[ -d "$OUT" && -s "$OUT/aux_info/eq_classes.txt.gz" ]]; then
            echo "Salmon quant for $SAMPLE on $NAME already exists — skipping."
            continue
        fi

        echo "Running Salmon for sample $SAMPLE on $NAME with $THREADS threads..."
        mkdir -p "$OUT"
        salmon quant --threads $THREADS --index "$IDX" --libType A \
            --dumpEq --hardFilter --skipQuant \
            -1 "$R1" -2 "$R2" \
            --output "$OUT"

        if [ -f "$OUT/aux_info/eq_classes.txt.gz" ]; then
            gunzip -c "$OUT/aux_info/eq_classes.txt.gz" > "$OUT/aux_info/eq_classes.txt"
        fi
    done
done

echo "=== Salmon quantification completed with $THREADS threads ==="


############################################
# 2. Corset clustering
############################################

CWORKDIR=$WORKDIR/salmon_quant

# Transcriptomes we quantified against
TRANSCRIPTOME_NAMES=(
  transcripts_fpkm0_s1
  transcripts_fpkm1_s1
  transcripts_fpkm0_s2
  transcripts_fpkm0.5_s2
  transcripts_fpkm0_s3
  transcripts_fpkm0.5_s3
  transcripts_fpkm1_s3
)

# Define sample order explicitly (important for -n and -g)
SAMPLES=(
  2R 5R 6R 7R 8R 9R 10R   # lone_skin
  2B 5B 6B 7B 8B 9B 10B   # lone_brain
  11R 12R 13R 14R 16R 17R 18R   # school_skin
  11B 12B 13B 14B 16B 17B 18B   # school_brain
)

# Build -n string (sample names)
NAMES=$(IFS=,; echo "${SAMPLES[*]}")

# Build -g string (group assignments)
GROUPS=$(printf "1,%.0s" {1..7})
GROUPS+=$(printf "2,%.0s" {1..7})
GROUPS+=$(printf "3,%.0s" {1..7})
GROUPS+=$(printf "4,%.0s" {1..7})
GROUPS=${GROUPS%,}

echo "Sample names (-n): $NAMES"
echo "Groupings   (-g): $GROUPS"

# Run Corset for each transcriptome
for TX in "${TRANSCRIPTOME_NAMES[@]}"; do
    echo ">>> Running Corset for $TX ..."
    OUTPREFIX=corset_${TX}

    FILES=()
    for S in "${SAMPLES[@]}"; do
        FILES+=("$CWORKDIR/$TX/${S}_uf${S}/aux_info/eq_classes.txt")
    done

    corset -i salmon_eq_classes -p "$OUTPREFIX" \
      -n "$NAMES" \
      -g "$GROUPS" \
      "${FILES[@]}"

    echo "<<< Finished Corset for $TX"
done

echo "=== All Corset runs complete ==="
